//Tree insertion and order Traversal
#include <iostream>
using namespace std;
struct node
{
	int data;
	struct node*left,*right;
};
node*newNode(int key)
{
	node*temp=new node;
	temp->data=key;
	temp->left=temp->right=NULL;
	return temp;
}
node *insert(node*root,int key)
{
	if(root==NULL)
	return newNode(key);
	if(key<root->data)
    {
    	root->left=insert(root->left,key);
    }
    else
    {
    	root->right=insert(root->right,key);
    }
    return root;
}
void inorder(node*root)
{
	if(root==NULL)
	return;
	inorder(root->left);
	
	cout<<root->data<<" ";
	inorder(root->right);
}
void postorder(node*root)
{

	if(root==NULL)
	return;
	postorder(root->left);
	postorder(root->right);
	cout<<root->data<<" ";
}
void preorder(node*root)
{
		if(root==NULL)
	     return;
	     cout<<root->data<<" ";
	     preorder(root->left);
	     preorder(root->right);
	     
}
int main() {
	int n,k;
  node*root=NULL;
  cin>>n;
  for(int i=0;i<n;i++)
  {
  	cin>>k;
  	root=insert(root,k);
  }
  inorder(root);
	return 0;
}
